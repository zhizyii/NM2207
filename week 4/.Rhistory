frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
original_diff <- abs(mean(times_basic) - mean(times_extended))
bias_estimate <- abs(mean(bootstrap) - original_diff)
frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
original_diff <- abs(mean(times_basic) - mean(times_extended))
bias_estimate <- abs(mean(bootstrap) - original_diff)
frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
original_diff <- abs(mean(times_basic) - mean(times_extended))
bias_estimate <- abs(mean(bootstrap) - original_diff)
frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
original_diff <- abs(mean(times_basic) - mean(times_extended))
bias_estimate <- abs(mean(bootstrap) - original_diff)
frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
#find quantiles for 2.5 & 97.5 percentiles
ci_boot_perc <- quantile(bootstrap, c(0.025, 0.975))
ci_boot_perc
nrep <- 10000
bootstrap <- numeric(nrep) #numeric(): to create an empty vector of length 100000
set.seed(1)
times_basic <- tv[tv$Cable == "Basic",2]
times_extended <- tv[tv$Cable == "Extended",2]
#to loop through 100000 times to fill up the empty vector
for (i in 1:nrep){
#sample(): to pick a sample from times_basic   *note that default produce 1 sample, length=length(times_basic)
basic_resample <- sample(times_basic, replace = TRUE)
#sample(): to pick a sample from times_extended   *note that default produce 1 sample, length=length(times_extended)
extended_resample <- sample(times_extended, replace = TRUE)
#assign the diff in mean of both samples to a position in the empty vector(bootstrap)
bootstrap[i] <- mean(basic_resample) - mean(extended_resample) #diff in mean
}
hist(bootstrap)
#find mean of the bootstrap
mean(bootstrap)
#find standard error of the bootstrap
sd(bootstrap)
nrep <- 10000
bootstrap <- numeric(nrep) #numeric(): to create an empty vector of length 100000
set.seed(1)
times_basic <- tv[tv$Cable == "Basic",2]
times_extended <- tv[tv$Cable == "Extended",2]
#to loop through 100000 times to fill up the empty vector
for (i in 1:nrep){
#sample(): to pick a sample from times_basic   *note that default produce 1 sample, length=length(times_basic)
basic_resample <- sample(times_basic, replace = TRUE)
#sample(): to pick a sample from times_extended   *note that default produce 1 sample, length=length(times_extended)
extended_resample <- sample(times_extended, replace = TRUE)
#assign the diff in mean of both samples to a position in the empty vector(bootstrap)
bootstrap[i] <- abs(mean(basic_resample) - mean(extended_resample)) #diff in mean
}
hist(bootstrap)
#find mean of the bootstrap
mean(bootstrap)
#find standard error of the bootstrap
sd(bootstrap)
original_diff <- abs(mean(times_basic) - mean(times_extended))
bias_estimate <- abs(mean(bootstrap) - original_diff)
frac <- fractions(bias / sd(bootstrap))
bias_estimate
frac
#generate a perm sample thru resampling w/o replacement
treatment_p <- sample(treatment, replace = FALSE)
treatment <- tv$Cable
#generate a perm sample thru resampling w/o replacement
treatment_p <- sample(treatment, replace = FALSE)
test_statistic <- original_diff
treatment <- tv$Cable
outcome <- tv$Times
permutation.test <- function(treatment, outcome){
#generate a perm sample thru resampling w/o replacement
treatment_p <- sample(treatment, size = length(treatment), replace = FALSE)
#calculate test statistic for perm sample
df_p <- data.frame(cable = treatment_p, times = outcome)
mean_p <- tapply(df_p$times, df_p$cable, mean)
a <- mean_p[1]
b <- mean_p[2]
c <- mean_p[3]
as.numeric(abs(a-b) + abs(b-c) + abs(c-a))
}
set.seed(123)
test <- replicate(nrep, permutation.test(treatment, outcome))
mean(abs(test) >= abs(original_diff))
test_statistic <- original_diff
treatment <- tv$Cable
outcome <- tv$Times
permutation.test <- function(treatment, outcome){
#generate a perm sample thru resampling w/o replacement
treatment_p <- sample(treatment, size = length(treatment), replace = FALSE)
#calculate test statistic for perm sample
df_p <- data.frame(cable = treatment_p, times = outcome)
mean_p <- tapply(df_p$times, df_p$cable, mean)
a <- mean_p[1]
b <- mean_p[2]
c <- mean_p[3]
as.numeric(abs(a-b))
}
set.seed(123)
test <- replicate(nrep, permutation.test(treatment, outcome))
mean(abs(test) >= abs(original_diff))
mean_p
mean_p <- tapply(df_p$times, df_p$cable, mean)
#calculate test statistic for perm sample
df_p <- data.frame(cable = treatment_p, times = outcome)
mean_p <- tapply(df_p$times, df_p$cable, mean)
mean_p
#test statistic of abs diff between the 2 types of cables
as.numeric(abs(mean_bas - mean_ext)) #converting to a numeric vector
mean_bas <- mean_p[1]
mean_ext <- mean_p[2]
df_p
tv
df_p
tv
df_p
tv
treatment <- tv$Cable
outcome <- tv$Times
permutation.test <- function(treatment, outcome){
#generate a perm sample thru resampling w/o replacement
treatment_p <- sample(treatment, size = length(treatment), replace = FALSE)
#create a data frame
df_p <- data.frame(cable = treatment_p, times = outcome)
#calc the mean for each type of cable
mean_p <- tapply(df_p$times, df_p$cable, mean)
#read the values and assign it to the type of cable
mean_bas <- mean_p[1]
mean_ext <- mean_p[2]
#test statistic of abs diff between the 2 types of cables
as.numeric(abs(mean_bas - mean_ext)) #converting to a numeric vector
}
set.seed(123)
test <- replicate(nrep, permutation.test(treatment, outcome))
mean(abs(test) >= abs(original_diff))
# p-value is 0.0102 < 0.05 so it is stasticially significant
# Enter code here
select(comm_data, date,channel,message)
# Enter code here
comm_data <- read.csv("CommQuest2023_Larger.csv")
# Enter code here
select(comm_data, date,channel,message)
# Enter code here
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
# Enter code here
select(comm_data, date,channel,message)
# Enter code here
select(comm_data, date,channel,message)
# Enter code here
select(comm_data, date)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
comm_data <- read.csv("CommQuest2023_Larger.csv")
# Enter code here
select(comm_data, date,channel,message)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
comm_data <- read.csv("CommQuest2023")
# Enter code here
comm_data <- read.csv("CommQuest2023.csv")
# Enter code here
comm_data <- read.csv("CommQuest2023_Larger.csv")
# Enter code here
comm_data <- read.csv("CommQuest2023_Larger.csv")
library(tidyverse)
# Enter code here
library(tidyverse)
# Enter code here
select(comm_data, date, channel, message)
# Enter code here
filter(channel == "Twitter")
# Enter code here
filter(comm_data, channel == "Twitter")
# Enter code here
arrange(comm_data, date)
comm_data
# Enter code here
comm_data %>% distinct(comm_data)
# Enter code here
comm_data %>% distinct(sender)
# Enter code here
comm_data %>%
count(message) %>%
group_by(sender)
# Enter code here
comm_data %>%
group_by(sender) %>%
count(message)
# Enter code here
comm_data %>%
group_by(channel) %>%
count(message)
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(comm_data, sender,sentiment) %>%
arrange(desc(sentiment))
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender,sentiment) %>%
arrange(desc(sentiment))
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
group_by(sender) %>%
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
group_by(sender)
# Enter code here
comm_data %>%
group_by(sender) %>%
filter(sentiment >= 0)
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender, sentiment) %>%
arrange(sender, desc(sentiment))
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender, sentiment) %>%
arrange(sender, desc(sentiment) %>%
summarise(mean(sentiment))
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender, sentiment) %>%
arrange(sentiment)
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender, sentiment) %>%
arrange(desc(sentiment))
# Enter code here
comm_data %>%
filter(sentiment >= 0) %>%
select(sender, sentiment) %>%
arrange(desc(sentiment))
# Enter code here
# Filter rows with positive sentiment scores
positive_sentiment <- comm_data %>%
filter(sentiment > 0)
# Calculate the average positive sentiment scores per sender
sentiment_summary <- positive_sentiment %>%
group_by(sender) %>%
summarise(Avg_Sentiment = mean(sentiment))
# Arrange in descending order by average sentiment scores
top_senders <- sentiment_summary %>%
arrange(desc(Avg_Sentiment))
# Select the top three senders
(top_three_senders <- top_senders %>%
head(3))
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av))
# Select the top three senders
(top_three_senders <- top_senders %>%
head(3))
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(mean(sentiment)) %>%
arrange(desc(n)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(mean(sentiment)) %>%
arrange(desc(n())) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(mean(sentiment)) %>%
```
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(mean(sentiment))
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
select(sender, sentiment)
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
select(comm_data, sender, sentiment)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
select(sender, sentiment)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
select(sender, sentiment)
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(av)
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(date)
# Enter code here
comm_data %>%
filter(sentiment < 0) %>%
select(message)
# Enter code here
comm_data %>%
mutate(positive = sentiment > 0, neutral = sentiment == 0, negative = sentiment <0)
# Enter code here
comm_data %>%
mutate(sentiment_label = "Positive" if (sentiment>0))
# Enter code here
label_sentiment <- function(sentiment) {
if (sentiment > 0) {
return("Positive")
} else if (sentiment < 0) {
return("Negative")
} else {
return("Neutral")
}
}
# Add a new column for sentiment labels
comm_data <- comm_data %>%
mutate(Sentiment_Label = sapply(sentiment, label_sentiment))
# Print the updated data frame
print(comm_data)
# Enter code here
label <- function(sentiment) {
if (sentiment > 0) {
return("Positive")
} else if (sentiment < 0) {
return("Negative")
} else {
return("Neutral")
}
}
comm_data %>%
mutate(sentiment_label = sapply(sentiment, label_sentiment))
# Enter code here
comm_data %>%
mutate(product = sentiment*length(message)) %>%
arrange(desc(product))
# Enter code here
comm_data %>%
mutate(product = sentiment*length(message)) %>%
arrange(desc(product))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(characters = length(message)) %>%
arrange(desc(characters))
# Enter code here
comm_data %>% distinct(sender)
# Enter code here
comm_data %>%
group_by(sender) %>%
count(message)
# Enter code here
comm_data %>%
group_by(channel) %>%
count(message)
# Enter code here
comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarise(av = mean(sentiment)) %>%
arrange(desc(av)) %>%
slice(1:3)
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(date)
# Enter code here
comm_data %>%
filter(sentiment < 0) %>%
select(message)
# Enter code here
comm_data %>%
mutate(product = sentiment*length(message)) %>%
arrange(desc(product))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(characters = length(message)) %>%
arrange(desc(characters))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(characters = length(message)) %>%
arrange(desc(characters))
library(tidyverse)
# Enter code here
select(comm_data, date, channel, message)
# Enter code here
filter(comm_data, channel == "Twitter")
# Enter code here
arrange(comm_data, date)
# Enter code here
comm_data %>% distinct(sender)
# Enter code here
comm_data %>%
group_by(sender) %>%
count(message)
# Enter code here
comm_data %>%
group_by(channel) %>%
count(message)
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(av = mean(sentiment)) %>%
arrange(date)
# Enter code here
comm_data %>%
filter(sentiment < 0) %>%
select(message)
# Enter code here
label <- function(sentiment) {
if (sentiment > 0) {
return("Positive")
} else if (sentiment < 0) {
return("Negative")
} else {
return("Neutral")
}
}
comm_data %>%
mutate(sentiment_label = sapply(sentiment, label))
# Enter code here
comm_data %>%
mutate(product = sentiment*length(message)) %>%
arrange(desc(product))
# Enter code here
comm_data %>%
group_by(date) %>%
summarise(characters = length(message)) %>%
arrange(desc(characters))
